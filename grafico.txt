PImage segmentationObject;
PImage groundTruth;
boolean metricsCalculated = false; // Flag to ensure metrics are calculated before drawing

// Variáveis globais para armazenar métricas
int vp, fp, fn, vn;

void setup() {
  size(800, 800); // Tamanho da janela para acomodar o gráfico
  
  // Carrega as imagens
  segmentationObject = loadImage("/mnt/data/imagem2.png");
  groundTruth = loadImage("/mnt/data/imagem1.jpg");
  
  if (segmentationObject == null || groundTruth == null) {
    println("Erro ao carregar as imagens.");
    exit();
  }
  
  // Redimensiona a ground truth para o mesmo tamanho da imagem segmentada
  groundTruth.resize(segmentationObject.width, segmentationObject.height);
  
  // Calcular métricas apenas se as imagens tiverem o mesmo tamanho após o redimensionamento
  if (segmentationObject.width == groundTruth.width && segmentationObject.height == groundTruth.height) {
    calcularMetricas(segmentationObject, groundTruth);
    metricsCalculated = true; // Set the flag to true to indicate metrics are calculated
  } else {
    println("As imagens de segmentação e ground truth têm tamanhos diferentes.");
  }
  
  noLoop();
}

void draw() {
  background(255);
  
  if (metricsCalculated) {
    // Verificar se as métricas foram calculadas corretamente
    println("Desenhando o gráfico...");
    desenharGrafico(vp, fp, fn, vn);
  } else {
    println("Métricas ainda não calculadas.");
  }
}

void desenharGrafico(int vp, int fp, int fn, int vn) {
    int yBase = 600;
    int maxVal = max(max(vp, fp), max(fn, vn));
    float scaleFactor = 200.0 / maxVal; 

    fill(0, 255, 0);  // Verde para vp
    rect(50, yBase, 50, -vp * scaleFactor);
    fill(255, 0, 0);  // Vermelho para fp
    rect(150, yBase, 50, -fp * scaleFactor);
    fill(0, 0, 255);  // Azul para fn
    rect(250, yBase, 50, -fn * scaleFactor);
    fill(128, 128, 128);  // Cinza para vn
    rect(350, yBase, 50, -vn * scaleFactor);
    
    fill(0);
    text("vp", 65, yBase + 15);
    text("fp", 165, yBase + 15);
    text("fn", 265, yBase + 15);
    text("vn", 365, yBase + 15);
}

void calcularMetricas(PImage imgSegmentada, PImage groundTruth) {
    imgSegmentada.loadPixels();
    groundTruth.loadPixels();

    vp = 0;
    fp = 0;
    fn = 0;
    vn = 0;

    for (int i = 0; i < imgSegmentada.pixels.length; i++) {
        boolean segmentado = (brightness(imgSegmentada.pixels[i]) > 127); 
        boolean real = (brightness(groundTruth.pixels[i]) > 127);  // mesmo limiar para o ground truth

        if (segmentado && real) vp++;
        else if (segmentado && !real) fp++;
        else if (!segmentado && real) fn++;
        else vn++;
    }

    // Impressão das métricas
    println("Verdadeiros Positivos (vp): " + vp);
    println("Falsos Positivos (fp): " + fp);
    println("Falsos Negativos (fn): " + fn);
    println("Verdadeiros Negativos (vn): " + vn);
}
